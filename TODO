Rough plan/ideas

Once something is done it is moved to history.htm.

Issues now added and tracked on GitHub at:
	https://github.com/alanbu/packman/issues
and
	https://github.com/alanbu/LibPkg/issues
for LibPkg issues.

This file will contain ideas under consideration and temporary documentation.

Items marked LibPkg: will need work done in the LibPkg backend library as well.


Web pages updates
-----------------
Hopefully I can get time to fix some of the Packaging web pages
www.riscos.info
 - Make sure there is an entry for PackMan and add link to it to RiscPkg page
 - GCCSDK pages link to PackMan not RiscPkg as it won't do the latest packages


Version 0.9
-----------

More major release which include new LibPkg standards version
- See Triggers below for details, LibPkg issue #3, PackMan issue # xx

- Move PackMan and it's libraries LibPkg/tbx to be build and shipped from the autobuilder taking the source from github
- Ensure Jenkins ci can build the packman and it's supporting libraries

For versions after 0.9
----------------------

- Take description display from summary bar and put in child window above summary that can be resize by dragging something at the top edge.
- After failure to commit should I reshow the configure window or clear all the entries?
- Commit failure may be leaving Components file which shouldn't be there - need to test
- LibPkg: Doesn't successfully "download" a file from the local disc if it's over 64K
- Install filter doesn't update with new packages after an install
- See why a failed install means you can't install anything new without the failed package turning up in the dependencies list.
- Check if netsurf builds still exists.
- Implement Purge functionality. I need to double check what this means, but if it means remove the package from the Package database then it could be very useful.

Things to check
---------------

- Sources window should not allow a second Update Lists window to be run.
- Check progress bar in update lists. Was 100% when it still had more to do.
- I thought get list failure had a more useful error message stating the list name - it didn't appear to when I had a problem recently.
- Got a crash on KnownSources when the html file was missing


Possible future changes (i.e. under consideration)
--------------------------------------------------

- Scroll bars on conflicts window
- Scroll bars on package configuration window so the full description of components can be shown.
- For Drag and drop give the choice of creating a stub instead of setting the install location (from Jess Hampshire).
- Cancel processing during install/remove
- Adjust on install does an immediate install (from Jess Hampshire)
- Download other list on timeout (from Grahame Parish)
  I have three sources set and if any one of them is unavailable then no updates can be applied from any of the other sources. It would be useful to timeout a connection to a source and skip to the next one.  The only way round this is to remove the source from the list and update lists again, but it's not ideal (the New Sources list in 0.7.x should make enabling/disabling easier)
- Automatic run update lists - ask if you want to upgrade and optionally exit (from Jess Hampshire).
- Verify individual packages (the Verify All seems fairly quick so this may not be required).
- Add option to check (verify should be added to 0.7.x/0.8), repair or re-install packages (Jess Hampshire)
- Previous versions - theoretically LibPkg can handle this. I would have to make sure.
- The information in in the main window is difficult to read, because its text colour is almost the same as the background colour. I would prefer to see black on white, and the same font as in the  main panel. Also, because the text doesn't wrap, and the width of the panel is fixed, information is lost at the right hand side.  (from Tony Moore).
- When upgrading check if the old version has been moved and prompt for it's location if it has.
- Consider how to let PackMan know if an application has been moved from outside of PackMan.
- Export Package - create a package containing a package and all it's dependencies.
- Package file format get file type for Packages.
- Possibly allow a package file to contain multiple packages.
- Possibly allow a package file be a stub package to tell PackMan to download something.
- Expert mode - give options to install even when dependencies are missing or there are conflicts.
- Multiple sections/categories.
- Better error if Status file is corrupt when loading packages database (Fred Graute)
- Or preferably more robust handling of Status file if it's missing tabs as it can when hand edited. Possibly by always putting something (e.g. 'User') in the last field. (Fred Graute)


Components (now in 0.8 - delete from here when Policy Manual is updated)
------------------------------------------------------------------------

Future options may include
 'Font' install as a RISC OS font.
 'SysMerge' This component is a system module so use sys merge logic to update it (e.g. If a new version of the module has been installed update the package version, but leave the existing module in place).


Triggers
--------

The following is a draft of the code for the next policy manual

In the table of the package parts
Triggers	This is a directory containing code to be run during install/remove and upgrade.

A new section on triggers needs to be added later to the manual.

The Triggers directory contains code to be run as part of the commit (installation, removal or upgrade) of a package.

Triggers should be used only when necessary and should be avoided in most cases as:
- They increase the complexity of a package
- Increase the time required to commit a package
- Will not be run if the user manually installs a program from outside the package manager.

It is always better to do any special actions when an application is first run rather than relying on triggers.

The following names are used by code in the Triggers directory.
PreInstall - Run before a package is installed
PreRemove - Run before a package is removed
PostInstall - Run After a package has been installed
PostRemove - Run After a package has been removed

It is only necessary to add the files for the triggers required.
Other code can be added to the Triggers directory and this will be available when the triggers are run. This allows for triggers to use shared code etc.

The code can be any executable code and is run in a background TaskWindow with a WimpSlot of 256K.
If logging is turned on, any output from the trigger is added to the Log.

A triggers operation should not rely on any other trigger having been run, and it should allow for cases where it may be called multiple times.

Information is passed to and from a Trigger using system variables prefixed "PkgTrigger$"
At the minimum a trigger must set PkgTrigger$ReturnCode to 0 if a trigger succeeds or to 1 if it fails.
On failure PkgTrigger$ReturnText can be set to give the error message reported by the package manager.

The full set of variables are:
PkgTrigger$Action	The current action, see below:
PkgTrigger$Abort	0 or 1. If set to 1 this trigger is being run to unwind a previous trigger failure.
PkgTrigger$OldVersion	The version of the package being removed or "" if it's an install.
PkgTrigger$NewVersion	The version of the package being installed or "" if it's being removed.
PkgTrigger$Dir	The directory the trigger is being run from. Use this as a prefix if running other code in the Triggers directory.
PkgTrigger$ReturnCode	The return code from the trigger, should be set to 0 for success or 1 for failure.
PkgTrigger$ReturnText	Set to a brief error message it the trigger fails.
PkgTrigger$Path<n>	<n> is a number from 1 upwards. These variable contain the path to the components in the package.
PkgTrigger$S_*	Variables prefixed "PkgTrigger$S_" are shared variables that exist for the lifetime of the current package commit and are deleted after the commit has finished. They are used so state can be shared between triggers. It is advisable to use the package name in the variable name to avoid clashes with triggers from other packages.

The PkgTrigger$Action can be:
install	The package is being installed.
remove	The package is being removed.
upgrade	The package is being upgraded.
abort-remove	The trigger is being run as a remove failed.
abort-install	The trigger is being run as an install failed.
abort-upgrade	The trigger is being run as an upgrade failed.

The triggers are called in the following order for a install.

PreInstall, PostInstall
If PreInstall fails the package is not installed.
If PostInstall fails the package is still installed, but a warning is shown.

The triggers are called in the following order for a remove.

PreRemove, PostRemove
If PreRemove fails the package is not removed
If PostRemove fails the package is still installed, but a warning is shown.

The triggers are called in the following order for an upgrade

old-PreRemove, new-PreInstall, old-PostRemove, old-PostInstall
The "old-" prefix indicates the trigger from the old package is run.
The "new-" prefix indicates the trigger from the new package is run.

If old-PreRemove fails
 - The upgrade does not take place
 - old-PostInstall is called (any failure is ignored)
 
If new-PreInstall fails
 - The upgrade does not take place
 - new-PostRemove is called (any failure is ignored)
 - old-PostInstall is called (any failure is ignored)

If old-PostRemove fails and is not part of an abort the upgrade completes, but a warning is shown.
If new-PostInstall fails and is not part of an abort the upgrade completes, but a warning is shown.

