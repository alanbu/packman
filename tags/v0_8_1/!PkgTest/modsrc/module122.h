/* Generated by CMunge 0.76 (10 May 2006) [with GCCSDK 4 changes r6040 at
 * /tags/release_4_1_2_v2/riscos/cmunge]
 * CMunge Copyright (c) 1999-2006 Robin Watts/Justin Fletcher
 * Copyright (c) 2007-2012 GCCSDK Developers and contributors */

#ifndef _CMUNGE_TestPkgModule_H_
#define _CMUNGE_TestPkgModule_H_

#include "kernel.h"

#define CMUNGE_VERSION (76)
#define CMHG_VERSION   (531) /* Nearest equivalent version */

#define Module_Title		"TestPkgModule"
#define Module_Help		"TestPkgModule"
#define Module_VersionString	"1.22"
#define Module_VersionNumber	122
#ifndef Module_Date
#define Module_Date		"14 Feb 2014"
#endif

#ifdef __cplusplus
extern "C" {
#endif


/***************************************************************************
 * Function:     gccmodule_init
 * Description:  Initialise the module, setting up vectors, callbacks and
 *               any other parts of the system necessary for the module to
 *               function.
 * Parameters:   tail        = pointer to command line (control terminated)
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful initialisation, or a pointer to
 *               an error block if the module could not start properly.
 **************************************************************************/
_kernel_oserror *gccmodule_init(const char *tail, int podule_base, void *pw);


/***************************************************************************
 * Function:     gccmodule_final
 * Description:  Finalise the module, shutting down any systems necessary,
 *               freeing vectors and releasing workspace
 * Parameters:   fatal       = fatality indicator; 1 if fatal, 0 if
 *                             reinitialising
 *               podule_base = address of podule module was started from, or
 *                             NULL if none
 *               pw          = private word for module
 * On exit:      Return NULL for successful finalisation, or a pointer to an
 *               error block if module was not shutdown properly.
 **************************************************************************/
_kernel_oserror *gccmodule_final(int fatal, int podule_base, void *pw);

#ifdef __cplusplus
}
#endif

#endif
